import { ChangeDetectorRef, EventEmitter, OnChanges, OnDestroy, OnInit, SimpleChanges } from "@angular/core";
import { ControlValueAccessor, FormControl } from "@angular/forms";
import { MatLegacyAutocomplete as MatAutocomplete, MatLegacyAutocompleteSelectedEvent as MatAutocompleteSelectedEvent, MatLegacyAutocompleteTrigger as MatAutocompleteTrigger } from "@angular/material/legacy-autocomplete";
import { MatLegacyInput as MatInput } from "@angular/material/legacy-input";
import * as i0 from "@angular/core";
/**
 * Country interface ISO 3166
 */
export interface Country {
    name: string;
    alpha2Code: string;
    alpha3Code: string;
    numericCode: string;
    callingCode: string;
}
declare type Optional<T, K extends keyof T> = Omit<T, K> & Partial<T>;
declare type CountryOptionalMandatoryAlpha2Code = Optional<Country, "alpha3Code" | "name" | "callingCode" | "numericCode">;
/**
 * @author Anthony Nahas
 * @since 11.19
 * @version 2.1.0
 */
export declare class MatSelectCountryComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor {
    i18n: string;
    private cdRef;
    appearance: "fill" | "outline";
    countries: Country[];
    label: string;
    placeHolder: string;
    required: boolean;
    disabled: boolean;
    nullable: boolean;
    readonly: boolean;
    tabIndex: number | string;
    class: string;
    itemsLoadSize: number;
    loading: boolean;
    showCallingCode: boolean;
    excludedCountries: CountryOptionalMandatoryAlpha2Code[];
    autocomplete: string;
    language: string;
    name: string;
    error: string;
    cleareable: boolean;
    formControl?: FormControl | undefined;
    statesAutocompleteRef: MatAutocomplete;
    autocompleteTrigger: MatAutocompleteTrigger;
    inputElement: MatInput;
    onCountrySelected: EventEmitter<Country>;
    filteredOptions: Country[];
    db: Country[];
    loadingDB: boolean;
    debounceTime: number;
    filterString: string;
    private modelChanged;
    private countries$;
    private excludedCountries$;
    private value$;
    private unsubscribe$;
    private _value;
    constructor(i18n: string, cdRef: ChangeDetectorRef);
    get value(): Country;
    set value(value: Country);
    propagateChange: (_: any) => void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    onBlur(): void;
    onOptionsSelected($event: MatAutocompleteSelectedEvent): void;
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    autocompleteScroll(): void;
    inputChanged(value: string): void;
    ngOnDestroy(): void;
    clear(): void;
    private _loadCountriesFromDb;
    private _populateCountries;
    private _setValue;
    private _importLang;
    private _filter;
    static ɵfac: i0.ɵɵFactoryDeclaration<MatSelectCountryComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MatSelectCountryComponent, "mat-select-country", never, { "appearance": "appearance"; "countries": "countries"; "label": "label"; "placeHolder": "placeHolder"; "required": "required"; "disabled": "disabled"; "nullable": "nullable"; "readonly": "readonly"; "tabIndex": "tabIndex"; "class": "class"; "itemsLoadSize": "itemsLoadSize"; "loading": "loading"; "showCallingCode": "showCallingCode"; "excludedCountries": "excludedCountries"; "autocomplete": "autocomplete"; "language": "language"; "name": "name"; "error": "error"; "cleareable": "cleareable"; "formControl": "formControl"; "value": "value"; }, { "onCountrySelected": "onCountrySelected"; }, never, never, false, never>;
}
export {};
