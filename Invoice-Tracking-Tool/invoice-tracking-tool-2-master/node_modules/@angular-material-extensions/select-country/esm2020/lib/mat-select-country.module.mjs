import { NgModule } from "@angular/core";
import { MatAutocompleteModule } from "@angular/material/autocomplete";
import { MatButtonModule } from "@angular/material/button";
import { MatInputModule } from "@angular/material/input";
import { MatMenuModule } from "@angular/material/menu";
import { MatProgressBarModule } from "@angular/material/progress-bar";
import { MatFormFieldModule } from "@angular/material/form-field";
import { CommonModule } from "@angular/common";
import { FormsModule, ReactiveFormsModule } from "@angular/forms";
import { MatIconModule } from "@angular/material/icon";
import { COUNTRIES_DB } from "./i18n";
import { MatSelectCountryLangToken } from "./tokens";
import { JoinStringsPipe } from "./join.pipe";
import { MatSelectCountryComponent } from "./mat-select-country.component";
import * as i0 from "@angular/core";
import * as i1 from "@angular/material/icon";
import * as i2 from "@angular/platform-browser";
/**
 * @author Anthony Nahas
 * @since 06.11.19
 */
// @dynamic
export class MatSelectCountryModule {
    constructor(iconRegistry, sanitizer) {
        this.iconRegistry = iconRegistry;
        this.sanitizer = sanitizer;
        this.registerCountries();
    }
    static forRoot(i18n) {
        return {
            ngModule: MatSelectCountryModule,
            providers: [
                {
                    provide: MatSelectCountryLangToken,
                    useValue: i18n,
                },
            ],
        };
    }
    registerCountries() {
        for (const country of COUNTRIES_DB) {
            const countryAlpha2Code = country.alpha2Code.toLowerCase();
            try {
                this.iconRegistry.addSvgIcon(countryAlpha2Code, this.sanitizer.bypassSecurityTrustResourceUrl(`assets/svg-country-flags/svg/${countryAlpha2Code}.svg`));
            }
            catch (err) {
                console.error("Error: icon not found for " + countryAlpha2Code, err);
            }
        }
    }
}
MatSelectCountryModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: MatSelectCountryModule, deps: [{ token: i1.MatIconRegistry }, { token: i2.DomSanitizer }], target: i0.ɵɵFactoryTarget.NgModule });
MatSelectCountryModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "15.0.1", ngImport: i0, type: MatSelectCountryModule, declarations: [MatSelectCountryComponent, JoinStringsPipe], imports: [CommonModule,
        // Forms
        FormsModule,
        ReactiveFormsModule,
        // Material
        MatButtonModule,
        MatMenuModule,
        MatInputModule,
        MatAutocompleteModule,
        MatIconModule,
        MatProgressBarModule,
        MatFormFieldModule], exports: [MatSelectCountryComponent] });
MatSelectCountryModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: MatSelectCountryModule, imports: [CommonModule,
        // Forms
        FormsModule,
        ReactiveFormsModule,
        // Material
        MatButtonModule,
        MatMenuModule,
        MatInputModule,
        MatAutocompleteModule,
        MatIconModule,
        MatProgressBarModule,
        MatFormFieldModule] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: MatSelectCountryModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [MatSelectCountryComponent, JoinStringsPipe],
                    imports: [
                        CommonModule,
                        // Forms
                        FormsModule,
                        ReactiveFormsModule,
                        // Material
                        MatButtonModule,
                        MatMenuModule,
                        MatInputModule,
                        MatAutocompleteModule,
                        MatIconModule,
                        MatProgressBarModule,
                        MatFormFieldModule,
                    ],
                    exports: [MatSelectCountryComponent],
                }]
        }], ctorParameters: function () { return [{ type: i1.MatIconRegistry }, { type: i2.DomSanitizer }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlbGVjdC1jb3VudHJ5Lm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItbWF0ZXJpYWwtZXh0ZW5zaW9ucy9zZWxlY3QtY291bnRyeS9zcmMvbGliL21hdC1zZWxlY3QtY291bnRyeS5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF1QixRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDdkUsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdkQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDdEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFFbEUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVsRSxPQUFPLEVBQUUsYUFBYSxFQUFtQixNQUFNLHdCQUF3QixDQUFDO0FBRXhFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFdEMsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRXJELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFOUMsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7Ozs7QUFjM0U7OztHQUdHO0FBQ0gsV0FBVztBQXFCWCxNQUFNLE9BQU8sc0JBQXNCO0lBQ2pDLFlBQ1UsWUFBNkIsRUFDN0IsU0FBdUI7UUFEdkIsaUJBQVksR0FBWixZQUFZLENBQWlCO1FBQzdCLGNBQVMsR0FBVCxTQUFTLENBQWM7UUFFL0IsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQ1osSUFBd0M7UUFFeEMsT0FBTztZQUNMLFFBQVEsRUFBRSxzQkFBc0I7WUFDaEMsU0FBUyxFQUFFO2dCQUNUO29CQUNFLE9BQU8sRUFBRSx5QkFBeUI7b0JBQ2xDLFFBQVEsRUFBRSxJQUFJO2lCQUNmO2FBQ0Y7U0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELGlCQUFpQjtRQUNmLEtBQUssTUFBTSxPQUFPLElBQUksWUFBWSxFQUFFO1lBQ2xDLE1BQU0saUJBQWlCLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxXQUFXLEVBQUUsQ0FBQztZQUMzRCxJQUFJO2dCQUNGLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUMxQixpQkFBaUIsRUFDakIsSUFBSSxDQUFDLFNBQVMsQ0FBQyw4QkFBOEIsQ0FDM0MsZ0NBQWdDLGlCQUFpQixNQUFNLENBQ3hELENBQ0YsQ0FBQzthQUNIO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1osT0FBTyxDQUFDLEtBQUssQ0FBQyw0QkFBNEIsR0FBRyxpQkFBaUIsRUFBRSxHQUFHLENBQUMsQ0FBQzthQUN0RTtTQUNGO0lBQ0gsQ0FBQzs7bUhBcENVLHNCQUFzQjtvSEFBdEIsc0JBQXNCLGlCQW5CbEIseUJBQXlCLEVBQUUsZUFBZSxhQUV2RCxZQUFZO1FBRVosUUFBUTtRQUNSLFdBQVc7UUFDWCxtQkFBbUI7UUFFbkIsV0FBVztRQUNYLGVBQWU7UUFDZixhQUFhO1FBQ2IsY0FBYztRQUNkLHFCQUFxQjtRQUNyQixhQUFhO1FBQ2Isb0JBQW9CO1FBQ3BCLGtCQUFrQixhQUVWLHlCQUF5QjtvSEFFeEIsc0JBQXNCLFlBakIvQixZQUFZO1FBRVosUUFBUTtRQUNSLFdBQVc7UUFDWCxtQkFBbUI7UUFFbkIsV0FBVztRQUNYLGVBQWU7UUFDZixhQUFhO1FBQ2IsY0FBYztRQUNkLHFCQUFxQjtRQUNyQixhQUFhO1FBQ2Isb0JBQW9CO1FBQ3BCLGtCQUFrQjsyRkFJVCxzQkFBc0I7a0JBcEJsQyxRQUFRO21CQUFDO29CQUNSLFlBQVksRUFBRSxDQUFDLHlCQUF5QixFQUFFLGVBQWUsQ0FBQztvQkFDMUQsT0FBTyxFQUFFO3dCQUNQLFlBQVk7d0JBRVosUUFBUTt3QkFDUixXQUFXO3dCQUNYLG1CQUFtQjt3QkFFbkIsV0FBVzt3QkFDWCxlQUFlO3dCQUNmLGFBQWE7d0JBQ2IsY0FBYzt3QkFDZCxxQkFBcUI7d0JBQ3JCLGFBQWE7d0JBQ2Isb0JBQW9CO3dCQUNwQixrQkFBa0I7cUJBQ25CO29CQUNELE9BQU8sRUFBRSxDQUFDLHlCQUF5QixDQUFDO2lCQUNyQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IE1hdEF1dG9jb21wbGV0ZU1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC9hdXRvY29tcGxldGVcIjtcbmltcG9ydCB7IE1hdEJ1dHRvbk1vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9tYXRlcmlhbC9idXR0b25cIjtcbmltcG9ydCB7IE1hdElucHV0TW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL2lucHV0XCI7XG5pbXBvcnQgeyBNYXRNZW51TW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL21lbnVcIjtcbmltcG9ydCB7IE1hdFByb2dyZXNzQmFyTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL3Byb2dyZXNzLWJhclwiO1xuaW1wb3J0IHsgTWF0Rm9ybUZpZWxkTW9kdWxlIH0gZnJvbSBcIkBhbmd1bGFyL21hdGVyaWFsL2Zvcm0tZmllbGRcIjtcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gXCJAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyXCI7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uXCI7XG5pbXBvcnQgeyBGb3Jtc01vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xuXG5pbXBvcnQgeyBNYXRJY29uTW9kdWxlLCBNYXRJY29uUmVnaXN0cnkgfSBmcm9tIFwiQGFuZ3VsYXIvbWF0ZXJpYWwvaWNvblwiO1xuXG5pbXBvcnQgeyBDT1VOVFJJRVNfREIgfSBmcm9tIFwiLi9pMThuXCI7XG5cbmltcG9ydCB7IE1hdFNlbGVjdENvdW50cnlMYW5nVG9rZW4gfSBmcm9tIFwiLi90b2tlbnNcIjtcblxuaW1wb3J0IHsgSm9pblN0cmluZ3NQaXBlIH0gZnJvbSBcIi4vam9pbi5waXBlXCI7XG5cbmltcG9ydCB7IE1hdFNlbGVjdENvdW50cnlDb21wb25lbnQgfSBmcm9tIFwiLi9tYXQtc2VsZWN0LWNvdW50cnkuY29tcG9uZW50XCI7XG5cbmV4cG9ydCB0eXBlIE1hdFNlbGVjdENvdW50cnlTdXBwb3J0ZWRMYW5ndWFnZXMgPVxuICB8IFwiYnJcIlxuICB8IFwiZGVcIlxuICB8IFwiZW5cIlxuICB8IFwiZXNcIlxuICB8IFwiZnJcIlxuICB8IFwiaHJcIlxuICB8IFwiaHVcIlxuICB8IFwiaXRcIlxuICB8IFwibmxcIlxuICB8IFwicHRcIjtcblxuLyoqXG4gKiBAYXV0aG9yIEFudGhvbnkgTmFoYXNcbiAqIEBzaW5jZSAwNi4xMS4xOVxuICovXG4vLyBAZHluYW1pY1xuQE5nTW9kdWxlKHtcbiAgZGVjbGFyYXRpb25zOiBbTWF0U2VsZWN0Q291bnRyeUNvbXBvbmVudCwgSm9pblN0cmluZ3NQaXBlXSxcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcblxuICAgIC8vIEZvcm1zXG4gICAgRm9ybXNNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcblxuICAgIC8vIE1hdGVyaWFsXG4gICAgTWF0QnV0dG9uTW9kdWxlLFxuICAgIE1hdE1lbnVNb2R1bGUsXG4gICAgTWF0SW5wdXRNb2R1bGUsXG4gICAgTWF0QXV0b2NvbXBsZXRlTW9kdWxlLFxuICAgIE1hdEljb25Nb2R1bGUsXG4gICAgTWF0UHJvZ3Jlc3NCYXJNb2R1bGUsXG4gICAgTWF0Rm9ybUZpZWxkTW9kdWxlLFxuICBdLFxuICBleHBvcnRzOiBbTWF0U2VsZWN0Q291bnRyeUNvbXBvbmVudF0sXG59KVxuZXhwb3J0IGNsYXNzIE1hdFNlbGVjdENvdW50cnlNb2R1bGUge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGljb25SZWdpc3RyeTogTWF0SWNvblJlZ2lzdHJ5LFxuICAgIHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXJcbiAgKSB7XG4gICAgdGhpcy5yZWdpc3RlckNvdW50cmllcygpO1xuICB9XG5cbiAgc3RhdGljIGZvclJvb3QoXG4gICAgaTE4bjogTWF0U2VsZWN0Q291bnRyeVN1cHBvcnRlZExhbmd1YWdlc1xuICApOiBNb2R1bGVXaXRoUHJvdmlkZXJzPE1hdFNlbGVjdENvdW50cnlNb2R1bGU+IHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IE1hdFNlbGVjdENvdW50cnlNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE1hdFNlbGVjdENvdW50cnlMYW5nVG9rZW4sXG4gICAgICAgICAgdXNlVmFsdWU6IGkxOG4sXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgIH07XG4gIH1cblxuICByZWdpc3RlckNvdW50cmllcygpIHtcbiAgICBmb3IgKGNvbnN0IGNvdW50cnkgb2YgQ09VTlRSSUVTX0RCKSB7XG4gICAgICBjb25zdCBjb3VudHJ5QWxwaGEyQ29kZSA9IGNvdW50cnkuYWxwaGEyQ29kZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy5pY29uUmVnaXN0cnkuYWRkU3ZnSWNvbihcbiAgICAgICAgICBjb3VudHJ5QWxwaGEyQ29kZSxcbiAgICAgICAgICB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0UmVzb3VyY2VVcmwoXG4gICAgICAgICAgICBgYXNzZXRzL3N2Zy1jb3VudHJ5LWZsYWdzL3N2Zy8ke2NvdW50cnlBbHBoYTJDb2RlfS5zdmdgXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvcjogaWNvbiBub3QgZm91bmQgZm9yIFwiICsgY291bnRyeUFscGhhMkNvZGUsIGVycik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=