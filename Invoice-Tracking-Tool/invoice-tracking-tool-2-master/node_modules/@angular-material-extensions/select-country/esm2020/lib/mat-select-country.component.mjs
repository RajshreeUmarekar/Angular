import { Component, EventEmitter, forwardRef, Inject, Input, Output, ViewChild, } from "@angular/core";
import { NG_VALUE_ACCESSOR, } from "@angular/forms";
import { MatLegacyAutocompleteTrigger as MatAutocompleteTrigger, } from "@angular/material/legacy-autocomplete";
import { BehaviorSubject, combineLatest, fromEvent, Subject } from "rxjs";
import { debounceTime, startWith, takeUntil } from "rxjs/operators";
import { MatSelectCountryLangToken } from "./tokens";
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "@angular/material/input";
import * as i4 from "@angular/material/form-field";
import * as i5 from "@angular/material/autocomplete";
import * as i6 from "@angular/material/core";
import * as i7 from "@angular/material/icon";
import * as i8 from "@angular/material/progress-bar";
import * as i9 from "./join.pipe";
/**
 * @author Anthony Nahas
 * @since 11.19
 * @version 2.1.0
 */
export class MatSelectCountryComponent {
    constructor(i18n, cdRef) {
        this.i18n = i18n;
        this.cdRef = cdRef;
        this.appearance = "outline";
        this.countries = [];
        this.placeHolder = "Select country";
        this.showCallingCode = false;
        this.excludedCountries = [];
        this.name = "country";
        this.error = "";
        this.cleareable = false;
        this.formControl = undefined;
        // tslint:disable-next-line: no-output-on-prefix
        this.onCountrySelected = new EventEmitter();
        this.debounceTime = 300;
        this.filterString = "";
        this.modelChanged = new Subject();
        this.countries$ = new BehaviorSubject([]);
        this.excludedCountries$ = new BehaviorSubject([]);
        this.value$ = new BehaviorSubject(null);
        this.unsubscribe$ = new Subject();
        this.propagateChange = (_) => { };
    }
    get value() {
        return this._value;
    }
    set value(value) {
        // setting a value on a reactive form (formControlName) doesn't trigger ngOnChanges but it does call this setter
        this.value$.next(value);
    }
    ngOnInit() {
        combineLatest([this.countries$, this.value$, this.excludedCountries$])
            .pipe(
        // fixing the glitch on combineLatest https://blog.strongbrew.io/combine-latest-glitch/
        debounceTime(0), takeUntil(this.unsubscribe$))
            .subscribe(([countries, value, excludedCountries]) => {
            this._populateCountries(countries, excludedCountries);
            if (value) {
                this._setValue(value);
            }
        });
        if (!this.countries.length) {
            this._loadCountriesFromDb();
        }
        this.modelChanged
            .pipe(startWith(""), debounceTime(this.debounceTime), takeUntil(this.unsubscribe$))
            .subscribe((value) => {
            this.filterString = value;
            this._filter(value);
        });
    }
    ngOnChanges(changes) {
        if (changes.countries?.currentValue) {
            this.countries$.next(changes.countries.currentValue);
        }
        if (changes.excludedCountries?.currentValue) {
            this.excludedCountries$.next(changes.excludedCountries.currentValue);
        }
        if (changes.language?.currentValue &&
            changes.language.currentValue !== changes.language.previousValue) {
            console.log("Change on language detected", changes.language);
            let lastValue = this._value;
            this.filterString = "";
            this.inputChanged("");
            this._setValue(null);
            this.onCountrySelected.emit(null);
            this._loadCountriesFromDb(lastValue?.alpha2Code);
        }
    }
    onBlur() {
        if (this.nullable &&
            !this.inputElement.value &&
            this.statesAutocompleteRef.panel) {
            this._setValue(null);
            this.onCountrySelected.emit(null);
        }
    }
    onOptionsSelected($event) {
        const value = this.countries.find((country) => country.name === $event.option.value);
        this._setValue(value);
        this.onCountrySelected.emit(value);
    }
    writeValue(obj) {
        if (obj) {
            this.value = obj;
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
        // throw new Error('Method not implemented.');
    }
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    autocompleteScroll() {
        if (this.itemsLoadSize) {
            setTimeout(() => {
                if (this.statesAutocompleteRef &&
                    this.autocompleteTrigger &&
                    this.statesAutocompleteRef.panel) {
                    fromEvent(this.statesAutocompleteRef.panel.nativeElement, "scroll")
                        .pipe(takeUntil(this.autocompleteTrigger.panelClosingActions))
                        .subscribe(() => {
                        const scrollTop = this.statesAutocompleteRef.panel.nativeElement.scrollTop;
                        const scrollHeight = this.statesAutocompleteRef.panel.nativeElement.scrollHeight;
                        const elementHeight = this.statesAutocompleteRef.panel.nativeElement.clientHeight;
                        const atBottom = scrollHeight === scrollTop + elementHeight;
                        if (atBottom) {
                            // fetch more data if not filtered
                            if (this.filterString === "") {
                                const fromIndex = this.filteredOptions.length;
                                const toIndex = +this.filteredOptions.length + +this.itemsLoadSize;
                                this.filteredOptions = [
                                    ...this.filteredOptions,
                                    ...this.countries.slice(fromIndex, toIndex),
                                ];
                            }
                        }
                    });
                }
            });
        }
    }
    inputChanged(value) {
        this.modelChanged.next(value);
    }
    ngOnDestroy() {
        this.unsubscribe$.next();
        this.unsubscribe$.complete();
    }
    clear() {
        this.filterString = "";
        this.inputChanged("");
        this._setValue(null);
        this.onCountrySelected.emit(null);
    }
    _loadCountriesFromDb(alpha2Code) {
        this.loadingDB = true;
        this._importLang()
            .then((res) => {
            this.countries$.next(res);
            this._setValue(res.find((el) => el.alpha2Code == alpha2Code));
        })
            .catch((err) => console.error("Error: " + err))
            .finally(() => (this.loadingDB = false));
    }
    _populateCountries(countries, excludedCountries) {
        const excludeCountries = excludedCountries.map((c) => c.alpha2Code);
        this.countries = countries.filter((c) => !excludeCountries.includes(c.alpha2Code));
    }
    _setValue(value) {
        if (value && (!value.name || value.name === "Unknown")) {
            // lookup name based on alpha2 values could be extended to lookup on other values too
            const matchingCountry = this.countries.find((c) => c.alpha2Code === value.alpha2Code);
            if (!!matchingCountry) {
                value = matchingCountry;
            }
        }
        this._value = value?.name ? value : null;
        this.propagateChange(this._value);
    }
    _importLang() {
        const lang = this.language || this.i18n;
        switch (lang) {
            case "br":
                return import("./i18n/br")
                    .then((result) => result.COUNTRIES_DB_BR)
                    .then((y) => y);
            case "by":
                return import("./i18n/by")
                    .then((result) => result.COUNTRIES_DB_BY)
                    .then((y) => y);
            case "de":
                return import("./i18n/de")
                    .then((result) => result.COUNTRIES_DB_DE)
                    .then((y) => y);
            case "es":
                return import("./i18n/es")
                    .then((result) => result.COUNTRIES_DB_ES)
                    .then((y) => y);
            case "fr":
                return import("./i18n/fr")
                    .then((result) => result.COUNTRIES_DB_FR)
                    .then((y) => y);
            case "hr":
                return import("./i18n/hr")
                    .then((result) => result.COUNTRIES_DB_HR)
                    .then((y) => y);
            case "hu":
                return import("./i18n/hu")
                    .then((result) => result.COUNTRIES_DB_HU)
                    .then((y) => y);
            case "it":
                return import("./i18n/it")
                    .then((result) => result.COUNTRIES_DB_IT)
                    .then((y) => y);
            case "nl":
                return import("./i18n/nl")
                    .then((result) => result.COUNTRIES_DB_NL)
                    .then((y) => y);
            case "pt":
                return import("./i18n/pt")
                    .then((result) => result.COUNTRIES_DB_PT)
                    .then((y) => y);
            case "ru":
                return import("./i18n/ru")
                    .then((result) => result.COUNTRIES_DB_RU)
                    .then((y) => y);
            case "ua":
                return import("./i18n/ua")
                    .then((result) => result.COUNTRIES_DB_UA)
                    .then((y) => y);
            case "gl":
                return import("./i18n/gl")
                    .then((result) => result.COUNTRIES_DB_GL)
                    .then((y) => y);
            case "eu":
                return import("./i18n/eu")
                    .then((result) => result.COUNTRIES_DB_EU)
                    .then((y) => y);
            case "ca":
                return import("./i18n/ca")
                    .then((result) => result.COUNTRIES_DB_CA)
                    .then((y) => y);
            default:
                return import("./i18n/en")
                    .then((result) => result.COUNTRIES_DB)
                    .then((y) => y);
        }
    }
    _filter(value) {
        const filterValue = value.toLowerCase();
        // if not filtered, fetch reduced array
        if (this.itemsLoadSize && filterValue === "") {
            this.filteredOptions = this.countries.slice(0, this.itemsLoadSize);
        }
        else {
            this.filteredOptions = this.countries.filter((option) => option.name.toLowerCase().includes(filterValue) ||
                option.alpha2Code.toLowerCase().includes(filterValue) ||
                option.alpha3Code.toLowerCase().includes(filterValue));
        }
        // options in the UI are not updated when this component is used within a host component that uses OnPush
        this.cdRef.markForCheck();
    }
}
MatSelectCountryComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: MatSelectCountryComponent, deps: [{ token: forwardRef(() => MatSelectCountryLangToken) }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
MatSelectCountryComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.0.1", type: MatSelectCountryComponent, selector: "mat-select-country", inputs: { appearance: "appearance", countries: "countries", label: "label", placeHolder: "placeHolder", required: "required", disabled: "disabled", nullable: "nullable", readonly: "readonly", tabIndex: "tabIndex", class: "class", itemsLoadSize: "itemsLoadSize", loading: "loading", showCallingCode: "showCallingCode", excludedCountries: "excludedCountries", autocomplete: "autocomplete", language: "language", name: "name", error: "error", cleareable: "cleareable", formControl: "formControl", value: "value" }, outputs: { onCountrySelected: "onCountrySelected" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => MatSelectCountryComponent),
            multi: true,
        },
    ], viewQueries: [{ propertyName: "statesAutocompleteRef", first: true, predicate: ["countryAutocomplete"], descendants: true }, { propertyName: "autocompleteTrigger", first: true, predicate: MatAutocompleteTrigger, descendants: true }, { propertyName: "inputElement", first: true, predicate: ["inputElement"], descendants: true }], usesOnChanges: true, ngImport: i0, template: "<mat-form-field [appearance]=\"appearance\">\n  <mat-label *ngIf=\"label\">{{ label }}</mat-label>\n  <mat-icon\n    *ngIf=\"this.value\"\n    [svgIcon]=\"this.value?.alpha2Code?.toLowerCase()\"\n    class=\"mr-12 s-20 secondary-text\"\n    matSuffix\n  ></mat-icon>\n  <input\n    *ngIf=\"!!formControl\"\n    (blur)=\"onBlur()\"\n    (input)=\"inputChanged($event?.target?.value)\"\n    [class]=\"class\"\n    [matAutocomplete]=\"this.countryAutocomplete\"\n    [placeholder]=\"this.placeHolder\"\n    [readonly]=\"this.readonly\"\n    [tabIndex]=\"tabIndex\"\n    [value]=\"formControl.value?.name\"\n    [formControl]=\"formControl\"\n    [autocomplete]=\"this.autocomplete\"\n    [name]=\"this.name\"\n    aria-label=\"country\"\n    matInput\n    type=\"text\"\n    #inputElement\n  />\n  <input\n    *ngIf=\"!formControl\"\n    (blur)=\"onBlur()\"\n    (input)=\"inputChanged($event?.target?.value)\"\n    [class]=\"class\"\n    [matAutocomplete]=\"this.countryAutocomplete\"\n    [placeholder]=\"this.placeHolder\"\n    [readonly]=\"this.readonly\"\n    [tabIndex]=\"tabIndex\"\n    [value]=\"\n      showCallingCode\n        ? this.value\n          ? this.value?.name + ' (' + this.value?.callingCode + ')'\n          : ''\n        : this.value?.name\n    \"\n    [required]=\"this.required\"\n    [disabled]=\"this.disabled || this.loadingDB\"\n    [autocomplete]=\"this.autocomplete\"\n    [name]=\"this.name\"\n    aria-label=\"country\"\n    matInput\n    type=\"text\"\n    #inputElement\n  />\n  <mat-progress-bar\n    *ngIf=\"this.loadingDB || this.loading\"\n    mode=\"buffer\"\n  ></mat-progress-bar>\n  <mat-autocomplete\n    #countryAutocomplete=\"matAutocomplete\"\n    (opened)=\"autocompleteScroll()\"\n    (optionSelected)=\"onOptionsSelected($event)\"\n  >\n    <mat-option *ngFor=\"let country of filteredOptions\" [value]=\"country?.name\">\n      <div class=\"d-flex\">\n        <mat-icon [svgIcon]=\"country?.alpha2Code?.toLowerCase()\"></mat-icon>\n        <small\n          class=\"country-list-item\"\n          [title]=\"[country?.name, country?.alpha3Code] | joinStrings\"\n          *ngIf=\"!showCallingCode\"\n          >{{ [country?.name, country?.alpha3Code] | joinStrings }}</small\n        >\n        <small\n          class=\"country-list-item\"\n          [title]=\"\n            [country?.name, '(' + country?.callingCode + ')']\n              | joinStrings : ' '\n          \"\n          *ngIf=\"showCallingCode\"\n          >{{\n            [country?.name, \"(\" + country?.callingCode + \")\"]\n              | joinStrings : \" \"\n          }}</small\n        >\n      </div>\n    </mat-option>\n  </mat-autocomplete>\n  <mat-icon\n    class=\"cursor-pointer pos-rel\"\n    matSuffix\n    *ngIf=\"cleareable && !!value\"\n    (click)=\"clear()\"\n    >cancel</mat-icon\n  >\n  <mat-error *ngIf=\"formControl && formControl.invalid\">{{ error }}</mat-error>\n</mat-form-field>\n", styles: [".cursor-pointer{cursor:pointer}.pos-rel{position:relative}.country-list-item{float:right;margin-left:.5rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.d-flex{display:flex;width:100%}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "directive", type: i3.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { kind: "component", type: i4.MatFormField, selector: "mat-form-field", inputs: ["hideRequiredMarker", "color", "floatLabel", "appearance", "subscriptSizing", "hintLabel"], exportAs: ["matFormField"] }, { kind: "directive", type: i4.MatLabel, selector: "mat-label" }, { kind: "directive", type: i4.MatError, selector: "mat-error, [matError]", inputs: ["id"] }, { kind: "directive", type: i4.MatSuffix, selector: "[matSuffix], [matIconSuffix], [matTextSuffix]" }, { kind: "component", type: i5.MatAutocomplete, selector: "mat-autocomplete", inputs: ["disableRipple"], exportAs: ["matAutocomplete"] }, { kind: "component", type: i6.MatOption, selector: "mat-option", exportAs: ["matOption"] }, { kind: "directive", type: i5.MatAutocompleteTrigger, selector: "input[matAutocomplete], textarea[matAutocomplete]", exportAs: ["matAutocompleteTrigger"] }, { kind: "component", type: i7.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }, { kind: "component", type: i8.MatProgressBar, selector: "mat-progress-bar", inputs: ["color", "value", "bufferValue", "mode"], outputs: ["animationEnd"], exportAs: ["matProgressBar"] }, { kind: "pipe", type: i9.JoinStringsPipe, name: "joinStrings" }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.0.1", ngImport: i0, type: MatSelectCountryComponent, decorators: [{
            type: Component,
            args: [{ selector: "mat-select-country", providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => MatSelectCountryComponent),
                            multi: true,
                        },
                    ], template: "<mat-form-field [appearance]=\"appearance\">\n  <mat-label *ngIf=\"label\">{{ label }}</mat-label>\n  <mat-icon\n    *ngIf=\"this.value\"\n    [svgIcon]=\"this.value?.alpha2Code?.toLowerCase()\"\n    class=\"mr-12 s-20 secondary-text\"\n    matSuffix\n  ></mat-icon>\n  <input\n    *ngIf=\"!!formControl\"\n    (blur)=\"onBlur()\"\n    (input)=\"inputChanged($event?.target?.value)\"\n    [class]=\"class\"\n    [matAutocomplete]=\"this.countryAutocomplete\"\n    [placeholder]=\"this.placeHolder\"\n    [readonly]=\"this.readonly\"\n    [tabIndex]=\"tabIndex\"\n    [value]=\"formControl.value?.name\"\n    [formControl]=\"formControl\"\n    [autocomplete]=\"this.autocomplete\"\n    [name]=\"this.name\"\n    aria-label=\"country\"\n    matInput\n    type=\"text\"\n    #inputElement\n  />\n  <input\n    *ngIf=\"!formControl\"\n    (blur)=\"onBlur()\"\n    (input)=\"inputChanged($event?.target?.value)\"\n    [class]=\"class\"\n    [matAutocomplete]=\"this.countryAutocomplete\"\n    [placeholder]=\"this.placeHolder\"\n    [readonly]=\"this.readonly\"\n    [tabIndex]=\"tabIndex\"\n    [value]=\"\n      showCallingCode\n        ? this.value\n          ? this.value?.name + ' (' + this.value?.callingCode + ')'\n          : ''\n        : this.value?.name\n    \"\n    [required]=\"this.required\"\n    [disabled]=\"this.disabled || this.loadingDB\"\n    [autocomplete]=\"this.autocomplete\"\n    [name]=\"this.name\"\n    aria-label=\"country\"\n    matInput\n    type=\"text\"\n    #inputElement\n  />\n  <mat-progress-bar\n    *ngIf=\"this.loadingDB || this.loading\"\n    mode=\"buffer\"\n  ></mat-progress-bar>\n  <mat-autocomplete\n    #countryAutocomplete=\"matAutocomplete\"\n    (opened)=\"autocompleteScroll()\"\n    (optionSelected)=\"onOptionsSelected($event)\"\n  >\n    <mat-option *ngFor=\"let country of filteredOptions\" [value]=\"country?.name\">\n      <div class=\"d-flex\">\n        <mat-icon [svgIcon]=\"country?.alpha2Code?.toLowerCase()\"></mat-icon>\n        <small\n          class=\"country-list-item\"\n          [title]=\"[country?.name, country?.alpha3Code] | joinStrings\"\n          *ngIf=\"!showCallingCode\"\n          >{{ [country?.name, country?.alpha3Code] | joinStrings }}</small\n        >\n        <small\n          class=\"country-list-item\"\n          [title]=\"\n            [country?.name, '(' + country?.callingCode + ')']\n              | joinStrings : ' '\n          \"\n          *ngIf=\"showCallingCode\"\n          >{{\n            [country?.name, \"(\" + country?.callingCode + \")\"]\n              | joinStrings : \" \"\n          }}</small\n        >\n      </div>\n    </mat-option>\n  </mat-autocomplete>\n  <mat-icon\n    class=\"cursor-pointer pos-rel\"\n    matSuffix\n    *ngIf=\"cleareable && !!value\"\n    (click)=\"clear()\"\n    >cancel</mat-icon\n  >\n  <mat-error *ngIf=\"formControl && formControl.invalid\">{{ error }}</mat-error>\n</mat-form-field>\n", styles: [".cursor-pointer{cursor:pointer}.pos-rel{position:relative}.country-list-item{float:right;margin-left:.5rem;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.d-flex{display:flex;width:100%}\n"] }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => MatSelectCountryLangToken)]
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { appearance: [{
                type: Input
            }], countries: [{
                type: Input
            }], label: [{
                type: Input
            }], placeHolder: [{
                type: Input
            }], required: [{
                type: Input
            }], disabled: [{
                type: Input
            }], nullable: [{
                type: Input
            }], readonly: [{
                type: Input
            }], tabIndex: [{
                type: Input
            }], class: [{
                type: Input
            }], itemsLoadSize: [{
                type: Input
            }], loading: [{
                type: Input
            }], showCallingCode: [{
                type: Input
            }], excludedCountries: [{
                type: Input
            }], autocomplete: [{
                type: Input
            }], language: [{
                type: Input
            }], name: [{
                type: Input
            }], error: [{
                type: Input
            }], cleareable: [{
                type: Input
            }], formControl: [{
                type: Input
            }], statesAutocompleteRef: [{
                type: ViewChild,
                args: ["countryAutocomplete"]
            }], autocompleteTrigger: [{
                type: ViewChild,
                args: [MatAutocompleteTrigger]
            }], inputElement: [{
                type: ViewChild,
                args: ["inputElement"]
            }], onCountrySelected: [{
                type: Output
            }], value: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,